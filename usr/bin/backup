#!/usr/bin/python3

import configparser, io, os, shlex, sys, time
from argparse import ArgumentParser
from configparser import ConfigParser
from shutil import rmtree
from subprocess import Popen, PIPE

def main(args):
    if not os.path.exists(args.config):
        sys.exit('Config file does not exist')

    config = ConfigParser()
    config.read(args.config)

    type = config.get('backup', 'type', fallback=None)
    if type not in ('incremental', 'full'):
        sys.exit('Unknown backup type specified')

    source_dir = os.path.join(config.get('backup', 'source-dir', fallback='/'), '')
    destination_dir = os.path.join(config.get('backup', 'destination-dir', fallback='/'), '')

    pre_script = config.get('backup', 'pre-script', fallback=None)
    if pre_script:
        p = Popen(shlex.split(pre_script), stdout=PIPE)
        if args.progress:
            print('Running pre-script: {}'.format(pre_script))
            for line in iter(p.stdout.readline, b''):
                print(line.decode(), end='')
            print()
        p.communicate()

    rsync = ['rsync', '-a', '--numeric-ids', '--delete']
    if args.progress:
        rsync.append('--progress')

    partial = config.getboolean('backup', 'partial', fallback=False)
    if partial:
        rsync.append('--partial')
    compress = config.getboolean('backup', 'compress', fallback=False)
    if compress:
        rsync.append('-z')
    remote_shell = config.get('backup', 'remote-shell', fallback=None)
    if remote_shell:
        rsync.extend(('-e', remote_shell))
    include_from = config.get('backup', 'include-from', fallback=None)
    if include_from:
        rsync.append('--include-from={}'.format(include_from))
    if type == 'incremental':
        rsync.append('--link-dest={}'.format(os.path.join(destination_dir, 'current/')))
    rsync.append(source_dir)
    if type == 'incremental':
        lastdir = os.path.join(destination_dir, 'backup_{}/'.format(time.strftime('%Y-%m-%d_%H-%M')))
        rsync.append(lastdir)
    else:
        rsync.append(os.path.join(destination_dir, ''))
    p = Popen(rsync, stdout=PIPE, stderr=PIPE)

    if args.progress:
        for line in iter(p.stdout.readline, b''):
            print(line.decode(), end='')
        print()
    rsout, rserr = p.communicate()
    if p.returncode not in [0, 23, 24]:
        if type == 'incremental' and os.path.exists(lastdir):
            rmtree(lastdir)
        sys.exit(p.returncode)

    post_script = config.get('backup', 'post-script', fallback=None)
    if post_script:
        p = Popen(shlex.split(post_script), stdout=PIPE)
        if args.progress:
            print('Running post-script: {}'.format(post_script))
            for line in iter(p.stdout.readline, b''):
                print(line.decode(), end='')
            print()
        p.communicate()

    if type == 'incremental':
        symlink = os.path.join(destination_dir, 'current')
        if os.path.exists(symlink):
            os.remove(symlink)
        os.symlink(lastdir, symlink)
        backups = [a for a in os.listdir(destination_dir) if a.startswith('backup')]
        for oldestination_dir in sorted(backups)[:-config.getint('backup', 'retention', fallback=180)]:
            if args.progress:
                print('Removing old backup: {}'.format(oldestination_dir))
            rmtree(os.path.join(destination_dir, oldestination_dir))


if __name__ == '__main__':
    parser = ArgumentParser(description='Disassembler\'s Backup Tool')
    parser.add_argument('-c', '--config', required=True, help='specifies which config file will be used')
    parser.add_argument('-p', '--progress', action='store_true', help='shows progress during transfer')
    main(parser.parse_args())
